name: Build and Push Runtime Image

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'runtime/**'
      - '.github/workflows/build-runtime.yml'
    tags:
      - 'v*'
      - 'runtime-v*'
  pull_request:
    branches:
      - main
    paths:
      - 'runtime/**'
      - '.github/workflows/build-runtime.yml'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Custom tag name for the Docker image'
        required: false
        default: 'latest'

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: fullstackagent/fullstack-web-runtime

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            # Latest tag for main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Tag for develop branch
            type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}
            # Version tags (v1.0.0 -> 1.0.0)
            type=semver,pattern={{version}}
            # Version tags with v prefix
            type=semver,pattern=v{{version}}
            # Major and minor versions (v1.0.0 -> 1.0, 1)
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # SHA short (only on branch pushes, not tags)
            type=sha,format=short,enable=${{ !startsWith(github.ref, 'refs/tags/') }}
            # Custom tag from workflow dispatch
            type=raw,value=${{ github.event.inputs.tag_name }},enable=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name != '' }}
          labels: |
            org.opencontainers.image.title=FullStack Web Runtime
            org.opencontainers.image.description=Complete development environment for AI-powered full-stack development
            org.opencontainers.image.vendor=FullStackAgent
            maintainer=fanux@sealos.io

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./runtime
          file: ./runtime/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          provenance: false
          sbom: false
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Image digest
        if: github.event_name != 'pull_request'
        run: |
          echo "### Docker Image Published! 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | sed 's/^/- `/; s/$/`/' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY

      - name: Scan for vulnerabilities
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  test-image:
    needs: build
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version tag
        id: get_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="latest"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Test runtime image
        run: |
          IMAGE_TAG="${{ steps.get_version.outputs.version }}"
          echo "### Testing Runtime Image 🧪" >> $GITHUB_STEP_SUMMARY
          echo "Testing image: ${{ env.IMAGE_NAME }}:${IMAGE_TAG}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Test basic functionality
          docker run --rm ${{ env.IMAGE_NAME }}:${IMAGE_TAG} bash -c "echo '✅ Image starts successfully'" >> $GITHUB_STEP_SUMMARY

          # Test ttyd installation
          docker run --rm ${{ env.IMAGE_NAME }}:${IMAGE_TAG} bash -c "which ttyd" && echo "✅ ttyd is installed" >> $GITHUB_STEP_SUMMARY || echo "❌ ttyd not found" >> $GITHUB_STEP_SUMMARY

          # Test Node.js
          NODE_VERSION=$(docker run --rm ${{ env.IMAGE_NAME }}:${IMAGE_TAG} node --version)
          echo "✅ Node.js version: $NODE_VERSION" >> $GITHUB_STEP_SUMMARY

          # Test npm
          NPM_VERSION=$(docker run --rm ${{ env.IMAGE_NAME }}:${IMAGE_TAG} npm --version)
          echo "✅ npm version: $NPM_VERSION" >> $GITHUB_STEP_SUMMARY

          # Test Claude Code CLI (don't fail on this as it needs auth)
          docker run --rm ${{ env.IMAGE_NAME }}:${IMAGE_TAG} bash -c "claude --version 2>/dev/null || echo 'Claude Code CLI needs authentication'" >> $GITHUB_STEP_SUMMARY

          # Test PostgreSQL client
          PSQL_VERSION=$(docker run --rm ${{ env.IMAGE_NAME }}:${IMAGE_TAG} psql --version)
          echo "✅ PostgreSQL client: $PSQL_VERSION" >> $GITHUB_STEP_SUMMARY

          # Test GitHub CLI
          GH_VERSION=$(docker run --rm ${{ env.IMAGE_NAME }}:${IMAGE_TAG} gh --version | head -n 1)
          echo "✅ GitHub CLI: $GH_VERSION" >> $GITHUB_STEP_SUMMARY

          # Test Buildah (don't fail on this as it needs special setup)
          docker run --rm --privileged ${{ env.IMAGE_NAME }}:${IMAGE_TAG} bash -c "buildah --version 2>/dev/null || echo 'Buildah needs privileged mode'" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Basic tests completed! ✅" >> $GITHUB_STEP_SUMMARY